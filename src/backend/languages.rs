//! This file has been auto-generated by 'build.rs'
use std::collections::BTreeMap;
use glob::Pattern;

#[derive(Debug, Hash, Eq, PartialEq, Copy, Clone, PartialOrd, Ord)]
pub enum Languages {
    Binary,
    PlainText,
    Agda,
    Bash,
    C,
    CSharp,
    Cpp,
    Css,
    ErbEjs,
    Go,
    Haskell,
    Html,
    Java,
    Javascript,
    Json,
    Julia,
    Ocaml,
    Php,
    Python,
    Regex,
    Ruby,
    Rust,
    Scala,
    Typescript,
    Verilog,
}

pub static mut MODELINES: BTreeMap<Languages, &[&str]> = BTreeMap::new();

pub static mut FILENAMES: BTreeMap<Languages, &[&str]> = BTreeMap::new();
const FILENAMES_JAVA: [&str; 3] = ["*.java", "*.jav", "*.jsh", ];
const FILENAMES_JSON: [&str; 66] = [".all-contributorsrc", ".arcconfig", ".auto-changelog", ".c8rc", ".htmlhintrc", ".imgbotconfig", ".nycrc", ".tern-config", ".tern-project", ".watchmanconfig", "MODULE.bazel.lock", "Package.resolved", "Pipfile.lock", "bun.lock", "composer.lock", "deno.lock", "flake.lock", "mcmod.info", ".babelrc", ".devcontainer.json", ".eslintrc.json", ".jcsrc", ".jshintrc", ".jslintrc", ".swcrc", "*.json", "*.4Dform", "*.4Dproject", "*.avsc", "*.geojson", "*.gltf", "*.har", "*.ice", "*.JSON-tmLanguage", "*.json.example", "*.jsonl", "*.mcmeta", "*.sarif", "*.tact", "*.tfstate", "*.tfstate.backup", "*.topojson", "*.webapp", "*.webmanifest", "*.yy", "*.yyp", "*.jsonc", "*.code-snippets", "*.code-workspace", "*.sublime-build", "*.sublime-color-scheme", "*.sublime-commands", "*.sublime-completions", "*.sublime-keymap", "*.sublime-macro", "*.sublime-menu", "*.sublime-mousemap", "*.sublime_project", "*.sublime-settings", "*.sublime-theme", "*.sublime-workspace", "*.sublime_metrics", "*.sublime_session", "*.json5", "*.jsonld", "*.jq", ];
const FILENAMES_AGDA: [&str; 1] = ["*.agda", ];
const FILENAMES_RUBY: [&str; 45] = [".irbrc", "pryrc", ".simplecov", "Appraisals", "Berksfile", "Brewfile", "Buildfile", "Capfile", "Dangerfile", "Deliverfile", "Fastfile", "Gemfile", "Guardfile", "Jarfile", "Mavenfile", "Podfile", "Puppetfile", "Rakefile", "Snapfile", "Steepfile", "Thorfile", "Vagrantfile", "buildfile", "*.rb", "*.builder", "*.eye", "*.fcgi", "*.gemspec", "*.god", "*.jbuilder", "*.mspec", "*.pluginspec", "*.podspec", "*.prawn", "*.rabl", "*.rake", "*.rbi", "*.rbuild", "*.rbw", "*.rbx", "*.ru", "*.ruby", "*.spec", "*.thor", "*.watchr", ];
const FILENAMES_PYTHON: [&str; 22] = [".gclient", "DEPS", "SConscript", "SConstruct", "wscript", "*.py", "*.cgi", "*.fcgi", "*.gyp", "*.gypi", "*.lmi", "*.py3", "*.pyde", "*.pyi", "*.pyp", "*.pyt", "*.pyw", "*.rpy", "*.spec", "*.tac", "*.wsgi", "*.xpy", ];
const FILENAMES_HASKELL: [&str; 3] = ["*.hs", "*.hs-boot", "*.hsc", ];
const FILENAMES_OCAML: [&str; 7] = ["*.ml", "*.eliom", "*.eliomi", "*.ml4", "*.mli", "*.mll", "*.mly", ];
const FILENAMES_TYPESCRIPT: [&str; 3] = ["*.ts", "*.cts", "*.mts", ];
const FILENAMES_VERILOG: [&str; 2] = ["*.v", "*.veo", ];
const FILENAMES_HTML: [&str; 7] = ["*.html", "*.hta", "*.htm", "*.html.hl", "*.inc", "*.xht", "*.xhtml", ];
const FILENAMES_JAVASCRIPT: [&str; 26] = ["Jakefile", "*.js", "*._js", "*.bones", "*.cjs", "*.es", "*.es6", "*.frag", "*.gs", "*.jake", "*.javascript", "*.jsb", "*.jscad", "*.jsfl", "*.jslib", "*.jsm", "*.jspre", "*.jss", "*.jsx", "*.mjs", "*.njs", "*.pac", "*.sjs", "*.ssjs", "*.xsjs", "*.xsjslib", ];
const FILENAMES_CPP: [&str; 10] = ["*.cpp", "*.c++", "*.cc", "*.cxx", "*.cppm", "*.hpp", "*.h++", "*.hh", "*.hxx", "*.txx", ];
const FILENAMES_SCALA: [&str; 4] = ["*.scala", "*.kojo", "*.sbt", "*.sc", ];
const FILENAMES_BASH: [&str; 11] = ["*.sh", "*.bash", ".bash_aliases", ".bash_functions", ".bash_history", ".bash_logout", ".bash_profile", ".bashrc", ".envrc", ".login", ".profile", ];
const FILENAMES_C: [&str; 3] = ["*.c", "*.h", "*.h.in", ];
const FILENAMES_CSHARP: [&str; 4] = ["*.cs", "*.cake", "*.cs.pp", "*.csx", ];
const FILENAMES_RUST: [&str; 2] = ["*.rs", "*.rs.in", ];
const FILENAMES_JULIA: [&str; 1] = ["*.jl", ];
const FILENAMES_REGEX: [&str; 2] = ["*.regexp", "*.regex", ];
const FILENAMES_ERBEJS: [&str; 5] = ["*.ejs", "*.ect", "*.ejs.t", "*.jst", "*.erb", ];
const FILENAMES_GO: [&str; 1] = ["*.go", ];
const FILENAMES_PHP: [&str; 13] = [".php", ".php_cs", ".php_cs.dist", "*.php", "*.aw", "*.ctp", "*.fcgi", "*.inc", "*.php3", "*.php4", "*.php5", "*.phps", "*.phpt", ];
const FILENAMES_CSS: [&str; 1] = ["*.css", ];

pub static mut SHEBANG: BTreeMap<Languages, &[&str]> = BTreeMap::new();
const SHEBANG_BASH: [&str; 5] = ["#!/bin/sh", "#!/bin/bash", "#!/usr/bin/bash", "#!/usr/bin/env sh", "#!/usr/bin/env bash", ];

pub static mut HEURISTICS: BTreeMap<Languages, &[&str]> = BTreeMap::new();

fn init_modelines_map() {
    unsafe {
    }
}

fn init_filenames_map() {
    unsafe {
        FILENAMES.insert(Languages::Java, &FILENAMES_JAVA);
        FILENAMES.insert(Languages::Json, &FILENAMES_JSON);
        FILENAMES.insert(Languages::Agda, &FILENAMES_AGDA);
        FILENAMES.insert(Languages::Ruby, &FILENAMES_RUBY);
        FILENAMES.insert(Languages::Python, &FILENAMES_PYTHON);
        FILENAMES.insert(Languages::Haskell, &FILENAMES_HASKELL);
        FILENAMES.insert(Languages::Ocaml, &FILENAMES_OCAML);
        FILENAMES.insert(Languages::Typescript, &FILENAMES_TYPESCRIPT);
        FILENAMES.insert(Languages::Verilog, &FILENAMES_VERILOG);
        FILENAMES.insert(Languages::Html, &FILENAMES_HTML);
        FILENAMES.insert(Languages::Javascript, &FILENAMES_JAVASCRIPT);
        FILENAMES.insert(Languages::Cpp, &FILENAMES_CPP);
        FILENAMES.insert(Languages::Scala, &FILENAMES_SCALA);
        FILENAMES.insert(Languages::Bash, &FILENAMES_BASH);
        FILENAMES.insert(Languages::C, &FILENAMES_C);
        FILENAMES.insert(Languages::CSharp, &FILENAMES_CSHARP);
        FILENAMES.insert(Languages::Rust, &FILENAMES_RUST);
        FILENAMES.insert(Languages::Julia, &FILENAMES_JULIA);
        FILENAMES.insert(Languages::Regex, &FILENAMES_REGEX);
        FILENAMES.insert(Languages::ErbEjs, &FILENAMES_ERBEJS);
        FILENAMES.insert(Languages::Go, &FILENAMES_GO);
        FILENAMES.insert(Languages::Php, &FILENAMES_PHP);
        FILENAMES.insert(Languages::Css, &FILENAMES_CSS);
    }
}

fn init_shebang_map() {
    unsafe {
        SHEBANG.insert(Languages::Bash, &SHEBANG_BASH);
    }
}

fn init_heuristics_map() {
    unsafe {
    }
}
pub(crate) fn init_all_maps() {
    init_modelines_map();
    init_filenames_map();
    init_shebang_map();
    init_heuristics_map();
}

pub(crate) fn compile_modelines_map() -> BTreeMap<Languages, Vec<Pattern>> {
    let mut gmap = BTreeMap::new();

    unsafe {
        for lang in MODELINES.keys() {
            gmap.insert(*lang, vec![]);
            let m = gmap.get_mut(lang).unwrap();

            for val in MODELINES[lang] {
                m.push(Pattern::new(val).unwrap());
            }
        }
    }

    gmap
}

pub(crate) fn compile_filenames_map() -> BTreeMap<Languages, Vec<Pattern>> {
    let mut gmap = BTreeMap::new();

    unsafe {
        for lang in FILENAMES.keys() {
            gmap.insert(*lang, vec![]);
            let m = gmap.get_mut(lang).unwrap();

            for val in FILENAMES[lang] {
                m.push(Pattern::new(val).unwrap());
            }
        }
    }

    gmap
}

pub(crate) fn compile_shebang_map() -> BTreeMap<Languages, Vec<Pattern>> {
    let mut gmap = BTreeMap::new();

    unsafe {
        for lang in SHEBANG.keys() {
            gmap.insert(*lang, vec![]);
            let m = gmap.get_mut(lang).unwrap();

            for val in SHEBANG[lang] {
                m.push(Pattern::new(val).unwrap());
            }
        }
    }

    gmap
}

pub(crate) fn compile_heuristics_map() -> BTreeMap<Languages, Vec<Pattern>> {
    let mut gmap = BTreeMap::new();

    unsafe {
        for lang in HEURISTICS.keys() {
            gmap.insert(*lang, vec![]);
            let m = gmap.get_mut(lang).unwrap();

            for val in HEURISTICS[lang] {
                m.push(Pattern::new(val).unwrap());
            }
        }
    }

    gmap
}
